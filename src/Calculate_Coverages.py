#!/usr/bin/env python
# coding: utf-8
import argparse as ap
from Binnacle_IO_Utility import *
from Clustering_Utility import *

parser = ap.ArgumentParser(description="binnacle: A tool for binning metagenomic datasets using assembly graphs and scaffolds generated by metacarvel."+ 
						   "Calculate_Coverages.py estimates abundance for scaffolds generated by MetaCarvel.")
parser.add_argument("-g","--assembly", help="Assembly Graph generated by Metacarvel", required=True)
parser.add_argument("-a","--coverage", help="Output generated by running genomecov -d on the bed file generated by MetaCarvel", required=True)
parser.add_argument("-c",'--contigs', help="Contigs generated by the assembler, contigs.fasta",default="true", required=True)
parser.add_argument("-d","--dir", help="output directory for results", required=True)
parser.add_argument("-b","--binning", default="binnacle",
					help="Choice of Binning Algorithm to format the coverage outputs\n" +
					"1. Metabat\n"+
					"2. Maxbin2\n"+
					"3. Concoct\n"+
					"4. Binnacle's binning algorithm (default)")
parser.add_argument("-A", "--all_vs_all_alignments_Flag", help="Perform All vs All Alignments", default="false", required=False)
parser.add_argument('-M', "--alignments", help="Output generated by running genomecov -d on the bed files gnerated by mapping all reads to all assemblies", 
					default = "", required = False)

args = parser.parse_args()

graph_path = args.assembly
coverage_path  =  args.coverage
output_dir = args.dir
Contigs_Path = args.contigs
align_flag = args.all_vs_all_alignments_Flag
align_dir = args.alignments

if not isdir(output_dir): mkdir(output_dir)

G = nx.read_gml(graph_path)
node_list = list(G.nodes())
df_coverage = Load_Read_Coverage(coverage_path, node_list, output_dir) 
print('Loaded Coverage and Assembly Graph')

Write_Coverage_Outputs(G, df_coverage, output_dir)
Coords_Path = output_dir+'Coords_After_Delinking.txt'
op_path = output_dir+'Scaffolds.fasta'
summary_path = output_dir+'Summary_After_Delinking.txt'

Write_Scaffolds(Contigs_Path, Coords_Path, op_path)
print('Written Fasta Files')

cov_path = output_dir+'Summary_After_Delinking.txt'
Format_Outputs(args.binning, Coords_Path, summary_path,  output_dir, align_flag, align_dir)